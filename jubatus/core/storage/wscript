import Options

def options(opt): pass

def configure(conf): pass

def make_test(bld, src):
  bld.program(
    features = 'gtest',
    source = src,
    target = src[0:src.rindex('.')],
    use = 'jubatus_core',
    )

def make_tests(bld, srcs):
  for src in srcs:
    make_test(bld, src)

def build(bld):
  source = [
      'storage_base.cpp',
      'local_storage.cpp',
      'local_storage_mixture.cpp',
      'sparse_matrix_storage.cpp',
      'inverted_index_storage.cpp',
      'bit_vector.cpp', 'bit_index_storage.cpp',
      'lsh_vector.cpp',
      'lsh_util.cpp',
      'lsh_index_storage.cpp',
      ]
  header = [
      'storage_base.hpp',
      'storage_type.hpp',
      'bit_vector.hpp',
      'sparse_matrix_storage.hpp',
      'local_storage.hpp',
      'local_storage_mixture.hpp',
      ]
  use = ['PFICOMMON', 'MSGPACK']

  bld.core_sources.extend(bld.add_prefix(source))
  bld.core_headers.extend(bld.add_prefix(header))
  bld.core_use.extend(use)

  make_tests(bld, [
      'storage_test.cpp',
      'local_storage_mixture_test.cpp',
      'sparse_matrix_storage_test.cpp',
      'fixed_size_heap_test.cpp',
      'inverted_index_storage_test.cpp',
      'lsh_vector_test.cpp',
      'lsh_util_test.cpp',
      'lsh_index_storage_test.cpp',
      'bit_vector_test.cpp',
      'bit_index_storage_test.cpp',
      'storage_type_test.cpp',
      ])
