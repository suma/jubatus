
subdirs = []

def options(opt):
  opt.recurse(subdirs)

def configure(conf):
  conf.recurse(subdirs)

def build(bld):
  import Options
  source = [
      'exception.cpp',
      'key_manager.cpp',
      'vector_util.cpp',
      'jsonconfig/config.cpp',
      'jsonconfig/exception.cpp',
      ]
  headers = [
      'exception.hpp',
      'exception_info.hpp',
      'hash.hpp',
      'jsonconfig.hpp',
      'key_manager.hpp',
      'type.hpp',
      'unordered_map.hpp',
      'vector_util.hpp',
      'jsonconfig/cast.hpp',
      'jsonconfig/config.hpp',
      'jsonconfig/exception.hpp',
      ]
  use = ['PFICOMMON', 'MSGPACK']

  bld.core_sources.extend(bld.add_prefix(source))
  bld.core_headers.extend(bld.add_prefix(headers))
  bld.core_use.extend(use)

  test_src = [
      'exception_test.cpp',
      'key_manager_test.cpp',
      'vector_util_test.cpp',
      'jsonconfig_test.cpp',
    ]

  def make_test(s):
    bld.program(
      features = 'gtest',
      source = s,
      target = s[0:s.rfind('.')],
      includes = '.',
      use = 'PFICOMMON MSGPACK jubatus_core'
      )
  for s in test_src:
    make_test(s)

  bld.recurse(subdirs)
