def options(opt):
  pass

def configure(conf):
  pass

def make_test(bld, use, src):
  bld.program(
    features = 'gtest',
    source = src,
    target = src[0:src.rindex('.')],
    use = use,
    )

def make_tests(bld, use, srcs):
  for src in srcs:
    make_test(bld, use, src)


def build(bld):
  source = [
     'datum_to_fv_converter.cpp',
     'space_splitter.cpp',
     'character_ngram.cpp',
     'without_split.cpp',
     'revert.cpp',
     'weight_manager.cpp',
     'keyword_weights.cpp',
     'feature_hasher.cpp',
    ]
  header = [
      'word_splitter.hpp',
      'string_filter.hpp',
      'num_feature.hpp',
      'num_filter.hpp',
      'num_filter_impl.hpp',
      'datum_to_fv_converter.hpp',
      'datum.hpp',
      'weight_manager.hpp',
      'keyword_weights.hpp',
      'counter.hpp',
      'revert.hpp',
      'exception.hpp',
      ]
  use = ['PFICOMMON', 'MSGPACK']

  bld.core_sources.extend(bld.add_prefix(source))
  bld.core_headers.extend(bld.add_prefix(header))
  bld.core_use.extend(use)

  test_source = [
      'datum_to_fv_converter_test.cpp',
      'space_splitter_test.cpp',
      'character_ngram_test.cpp',
      'key_matcher_test.cpp',
      'num_filter_impl_test.cpp',
      'counter_test.cpp',
      'revert_test.cpp',
      'weight_manager_test.cpp',
      'keyword_weights_test.cpp',
      'feature_hasher_test.cpp',
      'except_match_test.cpp',
      ]
  test_use = use + ['jubatus_core']

  make_tests(bld, test_use, test_source)
